[
  {
    "method": "POST",
    "path": "/login",
    "description": "Authenticate a user using either username or email. Returns a session token on success.",
    "auth_required": false,
    "tags": [
      "auth",
      "sessions"
    ],
    "params": [
      {
        "name": "identity",
        "type": "String",
        "required": true,
        "desc": "Username or email address"
      },
      {
        "name": "password",
        "type": "String",
        "required": true,
        "desc": "User's password"
      }
    ],
    "responses": [
      {
        "code": 200,
        "desc": "Login successful",
        "example": {
          "token": "<jwt_token_here>"
        }
      },
      {
        "code": 400,
        "desc": "Missing identity or password",
        "example": {
          "error": "Missing identity or password"
        }
      },
      {
        "code": 401,
        "desc": "Invalid credentials",
        "example": {
          "error": "Invalid credentials"
        }
      }
    ]
  },
  {
    "method": "POST",
    "path": "/logout",
    "description": "Invalidate current session token. For JWT-based apps, the client must delete the token locally.",
    "auth_required": true,
    "tags": [
      "auth",
      "sessions"
    ],
    "params": [],
    "responses": [
      {
        "code": 200,
        "desc": "Logout successful",
        "example": {
          "message": "Logged out successfully"
        }
      }
    ]
  },
  {
    "method": "GET",
    "path": "/stickers",
    "description": "Get the list of available sticker overlays. Public route used by the editor.",
    "auth_required": false,
    "tags": [
      "stickers"
    ],
    "params": [],
    "responses": [
      {
        "code": 200,
        "desc": "List of stickers",
        "example": [
          {
            "id": 1,
            "name": "Hat",
            "file_path": "/stickers/hat.png"
          },
          {
            "id": 2,
            "name": "Laser Eyes",
            "file_path": "/stickers/lasereyes.png"
          }
        ]
      }
    ]
  },
  {
    "method": "POST",
    "path": "/password/forgot",
    "description": "Request a password reset link.If the email exists, a reset token is sent.The response is always generic to prevent user enumeration.",
    "auth_required": false,
    "tags": [
      "password",
      "reset"
    ],
    "params": [
      {
        "name": "email",
        "type": "String",
        "required": true,
        "desc": "The email address of the user requesting a password reset."
      }
    ],
    "responses": [
      {
        "code": 200,
        "desc": "Reset link sent (if account exists)",
        "example": {
          "message": "If your email exists, a reset link has been sent"
        }
      },
      {
        "code": 400,
        "desc": "Missing email",
        "example": {
          "error": "Missing email"
        }
      }
    ]
  },
  {
    "method": "POST",
    "path": "/password/reset",
    "description": "Request a password reset link. If the email exists, a reset token is sent.The response is always generic to prevent user enumeration.",
    "auth_required": false,
    "tags": [
      "password",
      "reset"
    ],
    "params": [
      {
        "name": "token",
        "type": "String",
        "required": true,
        "desc": "Reset token received by email"
      },
      {
        "name": "password",
        "type": "String",
        "required": true,
        "desc": "New password (minimum 8 characters)"
      }
    ],
    "responses": [
      {
        "code": 200,
        "desc": "Password reset successfully",
        "example": {
          "message": "Password reset successfully"
        }
      },
      {
        "code": 400,
        "desc": "Missing token or password",
        "example": {
          "error": "Missing token or password"
        }
      },
      {
        "code": 400,
        "desc": "Password too short",
        "example": {
          "error": "Password too short (min 8 chars)"
        }
      },
      {
        "code": 400,
        "desc": "Invalid or expired token",
        "example": {
          "error": "Invalid or expired token"
        }
      }
    ]
  },
  {
    "method": "POST",
    "path": "/signup",
    "description": "Register a new user. Sends a confirmation email with a validation token.",
    "auth_required": false,
    "tags": [
      "auth",
      "users"
    ],
    "params": [
      {
        "name": "username",
        "type": "String",
        "required": true,
        "desc": "Unique username"
      },
      {
        "name": "email",
        "type": "String",
        "required": true,
        "desc": "Valid email address"
      },
      {
        "name": "password",
        "type": "String",
        "required": true,
        "desc": "Minimum 8 characters"
      }
    ],
    "responses": [
      {
        "code": 201,
        "desc": "User created",
        "example": {
          "message": "Confirmation email sent"
        }
      },
      {
        "code": 400,
        "desc": "Validation failed",
        "example": {
          "error": "All fields are required"
        }
      },
      {
        "code": 400,
        "desc": "Validation failed",
        "example": {
          "error": "Invalid email format"
        }
      },
      {
        "code": 400,
        "desc": "Validation failed",
        "example": {
          "error": "Password too short (min 8 chars)"
        }
      },
      {
        "code": 400,
        "desc": "Validation failed",
        "example": {
          "error": "Username already registered"
        }
      },
      {
        "code": 400,
        "desc": "Validation failed",
        "example": {
          "error": "Email already registered"
        }
      }
    ]
  },
  {
    "method": "GET",
    "path": "/confirm",
    "description": "Confirm user email using the token sent during registration.",
    "auth_required": false,
    "tags": [
      "auth",
      "email"
    ],
    "params": [
      {
        "name": "token",
        "type": "String",
        "required": true,
        "desc": "Confirmation token sent via email"
      }
    ],
    "responses": [
      {
        "code": 200,
        "desc": "Email confirmed",
        "example": {
          "message": "Email confirmed successfully!"
        }
      },
      {
        "code": 400,
        "desc": "Invalid or missing token",
        "example": {
          "error": "Invalid or expired token"
        }
      }
    ]
  }
]