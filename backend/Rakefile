require "rake"
require "pg"
require "uri"
require "fileutils"

def database_targets
  [
    {env_var: "DATABASE_URL", label: "development"},
    {env_var: "TEST_DATABASE_URL", label: "test"}
  ]
end

desc "Export all API docs"
task "doc:export" do
  require_relative "./app/lib/api_doc"
  require_relative "./app"

  puts
  puts "📘 Exporting API Documentation"
  puts "────────────────────────────────────────────────"

  markdown_path = "docs/exported.md"
  webpage_path = "docs/routes.json"
  APIDoc.export_markdown(
    path: markdown_path,
    title: "📘 API Documentation",
    include_auth_notice: true
  )
  APIDoc.export_json(path: webpage_path)

  puts "✅ Done! Markdown exported to: #{markdown_path}"
  puts "✅ Done! Data loaded to: #{webpage_path}"
  puts "📄 You can open it in any Markdown viewer or GitHub"
  puts
end

# rubocop:disable Metrics/BlockLength
namespace :db do
  desc "Create both development and test databases"
  task :create do
    database_targets.each do |target|
      uri = URI.parse(ENV[target[:env_var]] || abort("Missing #{target[:env_var]}"))
      dbname = uri.path[1..]
      puts "📦 Creating #{target[:label]} database: #{dbname}"

      PG.connect(dbname: "postgres", user: uri.user, password: uri.password, host: uri.host) do |conn|
        conn.exec("CREATE DATABASE #{dbname}")
        puts "✅ Created: #{dbname}"
      rescue PG::DuplicateDatabase
        puts "⚠️  Already exists: #{dbname}"
      end
    end
  end

  desc "Run migrations on both databases"
  task :migrate do
    database_targets.each do |target|
      puts "🔄 Migrating #{target[:label]} database"
      ENV["DATABASE_URL"] = ENV[target[:env_var]] # temporarily override

      Dir.glob("db/migrate/*.rb").sort.each do |file|
        puts "  ↪ Running #{file}"
        load "./#{file}" # use `load` so the file is re-evaluated each time
      end
    end
  end

  desc "Drop both development and test databases"
  task :drop do
    database_targets.each do |target|
      uri = URI.parse(ENV[target[:env_var]] || abort("Missing #{target[:env_var]}"))
      dbname = uri.path[1..]
      puts "🗑️  Dropping #{target[:label]} database: #{dbname}"

      conn = PG.connect(
        dbname: "postgres",
        host: uri.host,
        user: uri.user,
        password: uri.password
      )

      begin
        # Terminate connections first
        conn.exec <<~SQL
          REVOKE CONNECT ON DATABASE #{dbname} FROM public;
          SELECT pg_terminate_backend(pid)
          FROM pg_stat_activity
          WHERE datname = '#{dbname}' AND pid <> pg_backend_pid();
        SQL

        # DROP must be outside transaction
        conn.exec("DROP DATABASE IF EXISTS #{dbname}")
        puts "✅ Dropped: #{dbname}"
      ensure
        conn.close
      end
    end
  end

  desc "Seed the database"
  task :seed do
    load "./db/seeds.rb"
  end
end
# rubocop:enable Metrics/BlockLength

desc "Run the test suite"
task :test do
  sh "bundle exec rspec"
end
